<?php
function node_to_json_menu() {

  $items = array();

  $items['nodejson/get'] = array(
    'title' => 'Dynamic Project',
    'page callback' => 'node_to_json_get_by_id',
    'access arguments' => array('access node_to_json content'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

 
function node_to_json_perm() {
   return array('access node_to_json content');
}

function node_to_json_get_by_id($node_id){
  $variables = array();
  $items = theme('node_to_json',&$variables);
  // create a JSON object. The object will contain a property named “project” that will be set with the $items variable. 
  return drupal_json(array('nodejson'=>$items));
}

function node_to_json_preprocess(&$variables){
//	$content = '<div class="inner">
//	<div class="field-thumbs">'.$imgs.'</div>
//	<h2 class="title">'.$project_node->title.'</h2>
//	<div class="field-date-completed">'.$date_completed.'</div>
//	<div class="taxonomy-field-jobs">'.$taxonomy.'</div>
//	<div class="field-project-link">'.$project_link.'</div>
//	<div class="body">'.$project_node->body.'<div class="close"><a href="#"><strong>close</strong></a></div></div>
//	</div>';
//	$items = $content;
  
  $items = '';
  $node = node_load($node_id);
  $node = (object)$node; 
  $variables['title'] = $node->title;
  $variables['body'] = $node->body;
    
  if ($node->field_project_date[0]['value'] != null && $node->field_project_date[0]['value'] != ""){
    $raw_date = explode("-",$node->field_project_date[0]['value']);
    $variables['date_completed'] = date('F', mktime(0,0,0,$raw_date[1],1)) . ", " . $raw_date[0];
  }

  $taxonomy = "<h1>Taxonomy</h1>";
  if ($node->taxonomy != null){
    foreach ($node->taxonomy as $cat){
      if ($cat->vid == 3){
        if ($taxonomy != ""){
          $taxonomy .= ", ";
        }
        $taxonomy .= $cat->name;
      }
    }
  }
  $variables['taxonomy'] = $taxonomy;

  $project_link = "<h1>Project Link</h1>";
  if ($node->field_project_link != null){
    $protocol = "http://";
    $protocol_ssl = "https://";
    $sub = "www.";
    $project_link_trimmed = $node->field_project_link[0]['url'];
    // remove the http
    if (startsWith($node->field_project_link[0]['url'], $protocol)){
      $project_link_trimmed = substr($node->field_project_link[0]['url'], strlen($protocol));
    }
    // remove the https
    if (startsWith($node->field_project_link[0]['url'], $protocol_ssl)){
      $project_link_trimmed = substr($node->field_project_link[0]['url'], strlen($protocol_ssl));
    }
    // remove the www
    if (startsWith($project_link_trimmed, $sub)){
      $project_link_trimmed = substr($project_link_trimmed, strlen($sub));
    }
    // remove the last slash
    if (endsWith($project_link_trimmed, "/")){
      $project_link_trimmed = substr($project_link_trimmed,0,strlen($project_link_trimmed)-1);
    }
    $project_link .= '<a href="'.$node->field_project_link[0]['url'].'" target="_blank">'.$project_link_trimmed.'</a>';
    $variables['project_link'] = $project_link;
  }

  $imgs = "<h1>Images</h1>";
  $firstimg = true;
  if (isset($node->field_project_images)){
    foreach($node->field_project_images as $img) {
      if ($firstimg) {
        $firstimg = false;
        continue;
      };
      $imgs .= '<img src="/'.imagecache_create_path('project_thumb', $img['filepath']).'" />';
    }
  }
  $variables['imgs'] = $imgs;
}

function node_to_json_theme($existing, $type, $theme, $path) {
  $hooks = array(
      'node_to_json_javascript' => array(
         'arguments' => array(),
      ),
   );
  $hooks['node_to_json'] = array(
      'path' => 'sites/all/themes/abx/',
      'template' => 'dynamic-project',
      'arguments'  => array(),
    );
  return $hooks;
}

function node_to_json_init() {
  theme('node_to_json_javascript');
}

function theme_node_to_json_javascript() {
  drupal_add_js(drupal_get_path('module', 'node_to_json') . '/node_to_json.js');
}

function startsWith($haystack,$needle,$case=true) {
    if($case){return (strcmp(substr($haystack, 0, strlen($needle)),$needle)===0);}
    return (strcasecmp(substr($haystack, 0, strlen($needle)),$needle)===0);
}

function endsWith($haystack,$needle,$case=true) {
    if($case){return (strcmp(substr($haystack, strlen($haystack) - strlen($needle)),$needle)===0);}
    return (strcasecmp(substr($haystack, strlen($haystack) - strlen($needle)),$needle)===0);
}

?>
